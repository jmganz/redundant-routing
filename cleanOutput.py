"""
	Clean CSV files generated by bwm-ng. Repair lines interrupted by status event logging.
"""

import glob
from tempfile import mkstemp
from shutil import move
from os import remove, close

# Collect the data from the given file

files = sorted(glob.glob('*.csv'))

for file in files:
  newFile = mkstemp()
  with open ("newFile", 'w') as cleanData:
    with open (file, 'r') as oldData:
      for line in oldData:
        newLine = []
        lastLine = line
        if (line.count(';') == 15) and (1460000000 < int(line.split(';')[0]) < 1480000000) and not ("timestamp" in line or "down" in line or "back" in line):
          newLine.append(line)
        elif (line.startswith("total") or line.startswith("lo")):
          print "ERROR: " + line
        elif line.startswith("eth"):
          newLine.append('#' + line)
        elif line.startswith('#'):
          newLine.append(line)
        for match in ["down", "back"]:
          if match in line and (line.count(';') > 0) and (1460000000 < int(line.split(';')[0]) < 1480000000):
            splitLine = line.split(match)
            newLine.append(splitLine[0][:-5])
            newLine.append('#' + splitLine[0][-5:] + match + splitLine[1])
            nextLine = oldData.next()
            while (nextLine.startswith("eth") or nextLine.startswith("#eth")):
              if nextLine.startswith("eth"):
                nextLine = '#' + nextLine
              newLine.append(nextLine)
              nextLine = oldData.next()
            if (nextLine.count(';') != 15) or not (1460000000 < int(nextLine.split(';')[0]) < 1480000000):
              newLine[0] = newLine[0] + nextLine
            else:
              print "ERROR: " + nextLine
        for printLine in newLine:
          cleanData.write(printLine)
  cleanData.close()
  remove(file)
  move("newFile", file)


#        if "timestamp" in line or "down" in line or "back" in line:
#          if line.startswith("total") or line.startswith("lo"):
#            print "ERROR: " + line
#          else if line.startswith("eth"):
#            newLine = '#' + line
#          else if "down" in line:
#            splitLine = line.split("down")
#            newLine1 = splitLine[0][:-5]
#            newLine2 = '#' + splitLine[0][-5:] + splitLine[1]
#            print newLine1
#            print newLine2
#            remainingContent = oldData.next()
#            if 1460000000 < int(remainingContent.split(';')[0]) < 1480000000:
#              newLine1 += remainingContent
#            else:
#              newline3 = remainingContent
#              remainingContent = oldData.next()
#              if 1460000000 < int(remainingContent.split(';')[0]) < 1480000000:
#                newLine1 += remainingContent
#            newFile.write(newLine1)
#            newFile.write(newLine2)
#          else if "back" in line:
#        else:
#          newLine = line
#        newFile.write(newLine)
#  close(newFile)
#  remove(file)
#  move(newFile, file)
